name: deploy-app-container

on:
  push:
    branches:
      - '*'
  pull_request:
    branches:
      - 'main'

  workflow_dispatch: {}

env:
  REGISTRY_LOGIN_SERVER: team4acr.azurecr.io
  KEY_VAULT_NAME: team4kv
  KEY_VAULT_SECRET_NAME_ACR_USERNAME: 'acr-username'
  KEY_VAULT_SECRET_NAME_ACR_PASSWORD: 'acr-password1'
  IMAGE_NAME: ie-bank-be
  AZURE_WEBAPP_NAME: grp4-be

jobs:
  build:
      runs-on: ubuntu-latest
      steps:
      # checkout the repo
      - name: 'Checkout Github Action'
        uses: actions/checkout@master

      - name: 'Set ENV based on event'
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "ENV=uat" >> $GITHUB_ENV
          elif [ "${{ github.event_name }}" = "push" ]; then
            if [ "${{ github.ref_name }}" = "main" ]; then
              echo "ENV=prod" >> $GITHUB_ENV
            else
              echo "ENV=dev" >> $GITHUB_ENV
            fi
          fi
          
      - name: Set up Python 3.11
        uses: actions/setup-python@v3
        with:
          python-version: '3.11'
      - name: Upgrade pip
        run: |
          python -m pip install --upgrade pip
      - name: Install dependencies
        run: |
          python -m pip install -r requirements.txt
      - name: Lint with flake8
        run: |
          pip install flask flask_sqlalchemy flask_cors
          pip install flake8 pytest
          # Stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: Test with pytest
        run: |

          # Run unit tests
          python -m pytest tests/unit -v

          # Run functional tests
          python -m pytest tests/functional -v

          # Generate coverage report
          python -m pytest --cov=iebank_api --cov-report=xml:coverage.xml


      - name: 'Login via Azure CLI'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: 'Get docker registry credentials from key vault'
        uses: azure/cli@v1
        with:
          inlineScript: |
            echo "REGISTRY_USERNAME=$(az keyvault secret show --name ${{ env.KEY_VAULT_SECRET_NAME_ACR_USERNAME }} --vault-name ${{ env.KEY_VAULT_NAME }} --query value -o tsv)" >> $GITHUB_ENV
            echo "REGISTRY_PASSWORD=$(az keyvault secret show --name ${{ env.KEY_VAULT_SECRET_NAME_ACR_PASSWORD }} --vault-name ${{ env.KEY_VAULT_NAME }} --query value -o tsv)" >> $GITHUB_ENV

      - uses: azure/docker-login@v1
        with:
          login-server: ${{ env.REGISTRY_LOGIN_SERVER }}
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ env.REGISTRY_PASSWORD }}

      - name: Set image version
        id: image-version
        run: echo "::set-output name=version::$(echo ${GITHUB_REF#refs/heads/})-$(date +'%Y.%m.%d.%H.%M')"

      - name: 'Build and push Docker image'
        working-directory: ./app
        run: |
          docker build . -t ${{ env.REGISTRY_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ steps.image-version.outputs.version }}
          docker build . -t ${{ env.REGISTRY_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}-latest
          docker push ${{ env.REGISTRY_LOGIN_SERVER }}/${{env.IMAGE_NAME}}:${{ steps.image-version.outputs.version }}
          docker push ${{ env.REGISTRY_LOGIN_SERVER }}/${{env.IMAGE_NAME}}:${{ github.ref_name }}-latest

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: 'Login via Azure CLI'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}


      - uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}-${{ env.ENV }}}
          images: '${{ env.REGISTRY_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}-latest'